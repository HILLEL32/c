#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <limits.h>
#include <unistd.h>


void welcome();
void getLocation();
char **splitArgument(char *str);

int main()
{
    welcome();
    getLocation();

    char input[256];

    printf("Enter a command: ");
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = 0; // הסרת '\n' בסוף

    char **arguments = splitArgument(input);
    if (!arguments) // אם קרתה שגיאה בפיצול
    {
        printf("Error splitting arguments.\n");
        return 1;
    }

    printf("Parsed Arguments:\n");
    for (int i = 0; arguments[i] != NULL; i++)
    printf("%s\n", arguments[i]);

    free(arguments); // שחרור המערך הראשי
    return 0;
}


void welcome()
{
    printf("\n\033[1;31m"); // צבע אדום
    
    printf(" ***************************************************************\n");
    printf("----------------------------------------------------------------\n");
    printf("  *       *  *****  *       *****   *****  *     *  *****  \n");
    printf("  *       *  *      *       *       *   *  * * * *  *      \n");
    printf("  *   *   *  ***    *       *       *   *  *  *  *  ***    \n");
    printf("  *  * *  *  *      *       *       *   *  *     *  *      \n");
    printf("  * *   * *  *****  *****   *****   *****  *     *  *****  \n");
    printf("----------------------------------------------------------------\n");
    printf(" ***************************************************************\n");
    
    printf("\033[0m\n"); // איפוס צבע
    printf("Welcome to myShell \n\n");
}

void getLocation()
{
    char cwd[PATH_MAX];  // הנתיב הנוכחי
    char hostname[1024]; // אחסון שם המחשב // 1024 מספר מקובל למגבלת
    // getenv() היא פונקציה מספריית <stdlib.h>, שמקבלת שם של משתנה סביבה (כמו "USER", "HOME", "PATH") ומחזירה מצביע (char *) למחרוזת עם הערך שלו.
    char *username = getenv("USER"); // לקבל ממערכת ההפעלה את שם המשתמש // getenv מספריית  <stdio.h>

    // שם המשתמש
    if (username == NULL)
    {
        username = "no know user";
    }
    // שם המחשב
    if (gethostname(hostname, sizeof(hostname)) != 0)
    {
        snprintf(hostname, sizeof(hostname), "unknown");
    }

    // הנתיב הנוכחי
    if (getcwd(cwd, sizeof(cwd)) == NULL)
    {
        snprintf(cwd, sizeof(cwd), "no know path");
    }

    printf("\033[1;32m%s@%s\033[0m", username, hostname);
    printf("\033[1;34m%s\033[0m", cwd);
}

char **splitArgument(char *str)
{
    if (str == NULL || *str == '\0') return NULL; // בדיקה אם הקלט ריק

    int count = 0;
    int length = strlen(str);

    // מקצים מקום למערך מצביעים (נניח עד 20 מילים, אפשר להגדיל אם צריך)
    char **words = malloc(20 * sizeof(char *));
    if (!words)
    {
        perror("Memory failed");
        return NULL;
    }

    for (int i = 0; i < length; i++)
    {
        // דילוג על רווחים בתחילת מילה
        while (str[i] == ' ') i++;
        if (str[i] == '\0') break; // אם הגענו לסוף המחרוזת, יוצאים

        // שמירת כתובת תחילת המילה
        words[count] = &str[i];
        count++;

        // מעבר עד סוף המילה
        while (str[i] != ' ' && str[i] != '\0') i++;

        if (str[i] == ' ') // החלפת רווח ב-'\0' כדי לסיים את המילה
        {
            str[i] = '\0';
        }
    }

    words[count] = NULL; // מסמנים את סוף הרשימה

    return words;
}

void logout(char *str)
{
    while (*str == ' ') // כל עוד המצביע לתו מסוים במחרוזת הוא ריק
        str++;          // מעבירה את המצביע לתא הבא במחרוזת

    if (*str == '\0') // אם המחרוזת ריקה
        return;       // לא יקרה כלום

    // בדיקה אם המחרוזת מתחילה ב- exit.
    if (strncmp(str, "exit", 4) == 0)
    {
        str += 4; // אם המחרוזת מתחילה במילה בת 4 תווים , המצביע יידלג 4 תוים קדימה כך שהוא יצביע ישירות על מה שמגיע אחרי

        while (*str == ' ')
            str++;
        if (*str == '\0')
        {
            printf("logout\n");
            exit(0);
        }
    }
}


// כניסה לתיקיות
void cd(char **args) {
    if (args[1] == NULL) { // אם המשתמש לא הכניס נתיב
        fprintf(stderr, "cd: missing argument\n");
        return;
    }

    // אם יש יותר מדי ארגומנטים (ללא גרשיים)
    if (args[2] != NULL) {
        fprintf(stderr, "cd: too many arguments (use quotes for spaces)\n");
        return;
    }

    // שינוי הנתיב
    if (chdir(args[1]) != 0) {
        perror("cd failed");
    }
}

void cp (char ** args) {
    // בודקים כמה נתונים המשתמש הכניס לפקודה
    int size = 0 ;
    if(args[size] != NULL) {size++;} 

    if (size != 2) {
        printf("too nuch argument\n");
        return;
    }

    FILE *fileOrginal;
    // FILE *fileOrginal -> 1;
    FILE *fileCopy;
    // FILE *fileCopy -> 2;

    int c; // מאחסן תו אחד בכל פעם // להעתיק תווים מהמקור אל המועתק.
    fileOrginal = fopen(args[0],"rb"); //  פתיחת הקובץ המקורי לקריאה
    // if (fileOrginal == NULL) {
    //     printf("Cannot open file %s\n", arguments[0]);
    //     return;
    // }
    fileCopy = fopen(args[1], "wb"); // פתיחת הקובץ המעותק להעתקה 
    // if (fileCopy == NULL) {
    //     printf("Cannot open file %s\n", arguments[1]);
    //     fclose(fileCopy);
    //     return;
    
    while((c = fgetc(fileOrginal) != EOF)) {fputc(c,fileCopy);} // מעתיקה כל תו שבקובץ המקורי לחדש, כל עוד הלולאה לא מגיעה לסוף הקובץ
    fclose(fileOrginal);
    fclose(fileCopy);
    printf("file copy!!\n");
}

// void delete(char *str) {}

// void mypipe(char ** argv1, char ** argv2) {}

// void move(char **args) {}

// void wchoppend(char ** args) {}

// void echowrite (char ** args) {}

// void read (char ** args) {}

// void wordCount(char ** args) {}


